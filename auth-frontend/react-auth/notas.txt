esto se parece más a una aplicación clasica pero siempre viene bien documentar el react porque es un follón y vamos a estar usando bootstrap. Comenzamos con el npx create react app y tal te genera sus cosas, no he querido tocar nada por no liarla, en app.js importamos react como un archivo de estilo

Lo siguiente en app.js ponemos una funcion app que da un div container con un row y dos columnas, dentro de cada columna metemos un componente de react que creamos aparte y que son básicamente dos formularios

estos formularios tienen un h2, un form y dos form.group cada uno con un label y un input, lo interesante es que antes del return definimos unas variables con la sintaxis de hook: let [nombredelavariable, funcionquelacambia] = useState('') esto permite crear una función que actualiza esa variable, así dentro del input de cada campo del formulario ponemos un onchange y su evento es que le pasa el evento y con el usando esa función y e.target.value cambiamos el valor de la variable. Luego tanto en el formulario en si como en el botón submit añadimos en uno onSubmit y en otro onclick, ambos disparan la función handleSubmit, esta función es la que hace la petición a la api.

Para hacer la peticion necesitamos usar axios que se instala y se importa como cualquier librería, luego dentro de ella importante el prevent default para que la pagina no recargue, creamos un objeto con la configuración de axios, ese objeto lleva el metodo de la petición, la url a la que se pide, y los datos que van en el body, luego usando axios(configuration) ejecutamos esa petición y la api nos devolverá algo, si es positivo nos da un rrsultado, si es negativo un error, gestionamos esto con un then/catch, no estamos usando los datos que nos devuelve aún pero nos sirve para usando la función setRegister/setLogin cambiar el estado de esa variable a true

En la zona del render tenemos algo nuevo y es un render condicional que funciona con la variable register, tiene este formato:
{ variable ? (renderizado si es true): (renderizado si es false)}
en ambas condiciones renderiza un <p> pero con clases distintas que cambian el color y contenido distinto